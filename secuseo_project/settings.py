"""
Django settings for secuseo_project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w1fux830-d47j(^t*p#f(_2lahgz=lz2s%th)z-u7t7-1-d5t_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'Backend',
    # reportes app lives under the secuseo_project package
    'secuseo_project.reportes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'secuseo_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'Frontend' / 'HTML' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'secuseo_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# Configure the database from environment variables so you can switch
# between SQLite (default) and PostgreSQL in development/production.
#
# Expected environment variables (recommended):
#   SQL_ENGINE (e.g. 'django.db.backends.postgresql')
#   SQL_DATABASE (database name)
#   SQL_USER
#   SQL_PASSWORD
#   SQL_HOST
#   SQL_PORT

DATABASES = {
    'default': {
        # Use the standard sqlite3 backend by default for local development.
        # We store geometries as JSONField, so a spatial backend is not required.
        'ENGINE': os.environ.get('SQL_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('SQL_DATABASE', BASE_DIR / 'db.sqlite3'),
        'USER': os.environ.get('SQL_USER', ''),
        'PASSWORD': os.environ.get('SQL_PASSWORD', ''),
        'HOST': os.environ.get('SQL_HOST', ''),
        'PORT': os.environ.get('SQL_PORT', ''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'Frontend',
]

# Media (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# If GDAL is installed via Conda, point Django to the GDAL DLL so GeoDjango can find it on Windows.
GDAL_LIBRARY_PATH = os.environ.get('GDAL_LIBRARY_PATH', r"C:\Users\dnalj\miniconda3\envs\secuseo-py311\Library\bin\gdal.dll")
# If libspatialite is available in the conda env, point to it as well so the spatiallite
# backend can be used with SQLite during local development.
SPATIALITE_LIBRARY_PATH = os.environ.get('SPATIALITE_LIBRARY_PATH', r"C:\Users\dnalj\miniconda3\envs\secuseo-py311\Library\bin\mod_spatialite.dll")
# fallback to spatialite.dll if mod_spatialite is not present
if not os.path.exists(SPATIALITE_LIBRARY_PATH):
    alt = r"C:\Users\dnalj\miniconda3\envs\secuseo-py311\Library\bin\spatialite.dll"
    if os.path.exists(alt):
        SPATIALITE_LIBRARY_PATH = alt

# If you want to use spatialite with the default sqlite DB for development, set the engine
# to django.contrib.gis.db.backends.spatialite via environment variable SQL_ENGINE.
